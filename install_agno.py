#!/usr/bin/env python3
"""
Script para instalar o framework Agno e suas depend√™ncias.
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """
    Executa um comando e mostra o resultado.
    """
    print(f"\nüîß {description}...")
    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro durante {description}:")
        print(f"   C√≥digo de erro: {e.returncode}")
        print(f"   Sa√≠da: {e.stdout}")
        print(f"   Erro: {e.stderr}")
        return False

def check_python_version():
    """
    Verifica se a vers√£o do Python √© compat√≠vel.
    """
    print("üêç Verificando vers√£o do Python...")
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} √© compat√≠vel")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} n√£o √© compat√≠vel")
        print("   Requisito: Python 3.8 ou superior")
        return False

def install_agno_dependencies():
    """
    Instala o Agno e suas depend√™ncias.
    """
    dependencies = [
        "agno",
        "openai",
        "duckduckgo-search",
        "yfinance",
        "lancedb",
        "tantivy",
        "pypdf",
        "exa-py",
        "newspaper4k",
        "lxml_html_clean",
        "sqlalchemy"
    ]
    
    print(f"üì¶ Instalando {len(dependencies)} depend√™ncias do Agno...")
    
    for dep in dependencies:
        if not run_command(f"pip install {dep}", f"Instalando {dep}"):
            print(f"‚ö†Ô∏è  Falha ao instalar {dep}, continuando...")
    
    print("\n‚úÖ Instala√ß√£o das depend√™ncias conclu√≠da!")

def verify_installation():
    """
    Verifica se a instala√ß√£o foi bem-sucedida.
    """
    print("\nüîç Verificando instala√ß√£o...")
    
    try:
        import agno
        print("‚úÖ Framework Agno importado com sucesso")
        
        # Tenta importar componentes principais
        from agno.agent import Agent
        print("‚úÖ Agent importado com sucesso")
        
        from agno.models.openai import OpenAIChat
        print("‚úÖ OpenAI model importado com sucesso")
        
        from agno.tools.reasoning import ReasoningTools
        print("‚úÖ ReasoningTools importado com sucesso")
        
        from agno.tools.file import FileTools
        print("‚úÖ FileTools importado com sucesso")
        
        print("\nüéâ Agno instalado e configurado com sucesso!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar Agno: {e}")
        print("   Verifique se a instala√ß√£o foi conclu√≠da corretamente")
        return False

def create_env_template():
    """
    Cria template de configura√ß√£o para o .env.
    """
    print("\nüìù Criando template de configura√ß√£o...")
    
    env_content = """
# =======================================================
# CONFIGURA√á√ÉO AGNO - ADICIONE AO SEU ARQUIVO .env
# =======================================================

# Processador PDF (docling ou agno)
PDF_PROCESSOR=agno

# Chave da API OpenAI (OBRIGAT√ìRIA para o Agno)
OPENAI_API_KEY=your-openai-api-key-here

# =======================================================
# INSTRU√á√ïES:
# 1. Copie as linhas acima para o seu arquivo .env
# 2. Substitua 'your-openai-api-key-here' pela sua chave real da OpenAI
# 3. Reinicie a aplica√ß√£o
# =======================================================
"""
    
    try:
        with open("agno_config_template.txt", "w", encoding="utf-8") as f:
            f.write(env_content.strip())
        
        print("‚úÖ Template criado: agno_config_template.txt")
        print("   üìã Copie o conte√∫do para o seu arquivo .env")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar template: {e}")

def main():
    """
    Fun√ß√£o principal do instalador.
    """
    print("üöÄ Instalador do Framework Agno para PDF Digest")
    print("=" * 50)
    
    # Verifica vers√£o do Python
    if not check_python_version():
        print("\n‚ùå Instala√ß√£o cancelada: vers√£o do Python incompat√≠vel")
        sys.exit(1)
    
    # Instala depend√™ncias
    install_agno_dependencies()
    
    # Verifica instala√ß√£o
    if verify_installation():
        print("\n‚ú® Instala√ß√£o conclu√≠da com sucesso!")
        
        # Cria template de configura√ß√£o
        create_env_template()
        
        print("\nüìö Pr√≥ximos passos:")
        print("   1. Configure OPENAI_API_KEY no arquivo .env")
        print("   2. Configure PDF_PROCESSOR=agno no arquivo .env")
        print("   3. Reinicie a aplica√ß√£o")
        print("   4. Teste com: python exemplo_chamada_api_agno.py")
        
        print(f"\nüéØ O Agno est√° pronto para processar notas de corretagem B3!")
        
    else:
        print("\n‚ùå Falha na verifica√ß√£o da instala√ß√£o")
        print("   Verifique os erros acima e tente novamente")
        sys.exit(1)

if __name__ == "__main__":
    main()
