#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar configura√ß√£o da GPU/CUDA.
"""
import subprocess
import sys
import os


def run_command(command, description=""):
    """Executa comando e retorna resultado."""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return False, "", str(e)


def check_nvidia_driver():
    """Verifica se drivers NVIDIA est√£o instalados."""
    print("üîç Verificando drivers NVIDIA...")
    
    success, stdout, stderr = run_command("nvidia-smi")
    if success:
        print("‚úÖ Drivers NVIDIA detectados!")
        print("üìä Informa√ß√µes da GPU:")
        lines = stdout.split('\n')
        for line in lines:
            if 'NVIDIA' in line or 'CUDA Version' in line:
                print(f"   {line.strip()}")
        return True
    else:
        print("‚ùå nvidia-smi n√£o encontrado!")
        print(f"   Erro: {stderr}")
        return False


def check_cuda_toolkit():
    """Verifica se CUDA Toolkit est√° instalado."""
    print("\nüîç Verificando CUDA Toolkit...")
    
    # Verifica nvcc
    success, stdout, stderr = run_command("nvcc --version")
    if success:
        print("‚úÖ CUDA Toolkit detectado!")
        print(f"   Vers√£o: {stdout}")
        return True
    else:
        print("‚ùå CUDA Toolkit (nvcc) n√£o encontrado!")
        
        # Verifica vari√°vel de ambiente
        cuda_path = os.environ.get('CUDA_PATH')
        if cuda_path:
            print(f"   CUDA_PATH encontrado: {cuda_path}")
        else:
            print("   CUDA_PATH n√£o definido!")
        
        return False


def check_pytorch_cuda():
    """Verifica se PyTorch tem suporte CUDA."""
    print("\nüîç Verificando PyTorch CUDA...")
    
    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__} instalado!")
        
        cuda_available = torch.cuda.is_available()
        print(f"   CUDA dispon√≠vel: {cuda_available}")
        
        if cuda_available:
            print(f"   Vers√£o CUDA do PyTorch: {torch.version.cuda}")
            print(f"   N√∫mero de GPUs: {torch.cuda.device_count()}")
            
            for i in range(torch.cuda.device_count()):
                gpu_name = torch.cuda.get_device_name(i)
                print(f"   GPU {i}: {gpu_name}")
        else:
            print("   ‚ö†Ô∏è PyTorch n√£o consegue acessar CUDA!")
            
        return cuda_available
        
    except ImportError:
        print("‚ùå PyTorch n√£o instalado!")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar PyTorch: {e}")
        return False


def check_pytorch_installation():
    """Verifica a instala√ß√£o do PyTorch."""
    print("\nüîç Verificando instala√ß√£o do PyTorch...")
    
    try:
        import torch
        print(f"   Vers√£o: {torch.__version__}")
        print(f"   Compilado com CUDA: {torch.version.cuda}")
        print(f"   Compilado com cuDNN: {torch.backends.cudnn.version()}")
        
        # Verifica se foi instalado com suporte CPU-only
        if "+cpu" in torch.__version__:
            print("   ‚ö†Ô∏è DETECTADO: PyTorch CPU-only!")
            print("   Esta vers√£o n√£o tem suporte GPU!")
            return False
        
        return True
        
    except Exception as e:
        print(f"   Erro: {e}")
        return False


def suggest_fixes(has_nvidia, has_cuda, has_pytorch_cuda):
    """Sugere corre√ß√µes baseadas nos problemas encontrados."""
    print("\n" + "="*50)
    print("üõ†Ô∏è SUGEST√ïES DE CORRE√á√ÉO:")
    print("="*50)
    
    if not has_nvidia:
        print("\n‚ùå PROBLEMA: Drivers NVIDIA n√£o detectados")
        print("üîß SOLU√á√ÉO:")
        print("   1. Baixe e instale os drivers mais recentes:")
        print("      https://www.nvidia.com/Download/index.aspx")
        print("   2. Reinicie o computador ap√≥s instala√ß√£o")
        print("   3. Execute: nvidia-smi para testar")
    
    if not has_cuda:
        print("\n‚ùå PROBLEMA: CUDA Toolkit n√£o detectado")
        print("üîß SOLU√á√ÉO:")
        print("   1. Baixe CUDA Toolkit 11.8 ou 12.x:")
        print("      https://developer.nvidia.com/cuda-downloads")
        print("   2. Instale seguindo as instru√ß√µes do site")
        print("   3. Adicione ao PATH se necess√°rio")
    
    if has_nvidia and has_cuda and not has_pytorch_cuda:
        print("\n‚ùå PROBLEMA: PyTorch sem suporte CUDA")
        print("üîß SOLU√á√ÉO - Reinstalar PyTorch com CUDA:")
        print("   1. Desinstale PyTorch atual:")
        print("      pip uninstall torch torchvision torchaudio")
        print("   2. Visite: https://pytorch.org/get-started/locally/")
        print("   3. Selecione sua configura√ß√£o CUDA")
        print("   4. Execute o comando sugerido")
        print("\n   üìã COMANDOS SUGERIDOS:")
        
        # Comandos mais comuns
        print("\n   Para CUDA 11.8:")
        print("   pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118")
        
        print("\n   Para CUDA 12.1:")
        print("   pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121")
        
        print("\n   Para vers√£o mais recente:")
        print("   pip install torch torchvision torchaudio")
    
    if has_nvidia and has_cuda and has_pytorch_cuda:
        print("\n‚úÖ TUDO PARECE OK!")
        print("üîß POSS√çVEIS SOLU√á√ïES:")
        print("   1. Reinicie o Python/aplica√ß√£o")
        print("   2. Verifique se n√£o h√° conflitos de ambiente virtual")
        print("   3. Execute: python -c \"import torch; print(torch.cuda.is_available())\"")


def main():
    """Fun√ß√£o principal do diagn√≥stico."""
    print("üîß DIAGN√ìSTICO GPU/CUDA - PDF Digest")
    print("="*50)
    
    # Executa verifica√ß√µes
    has_nvidia = check_nvidia_driver()
    has_cuda = check_cuda_toolkit()
    has_pytorch_cuda = check_pytorch_cuda()
    
    # Informa√ß√µes do sistema
    print(f"\nüíª SISTEMA:")
    print(f"   Python: {sys.version}")
    print(f"   OS: {os.name}")
    
    # Verifica instala√ß√£o PyTorch
    check_pytorch_installation()
    
    # Sugere corre√ß√µes
    suggest_fixes(has_nvidia, has_cuda, has_pytorch_cuda)
    
    print("\n" + "="*50)
    print("‚úÖ Diagn√≥stico conclu√≠do!")
    print("üìö Para mais ajuda, consulte:")
    print("   - PyTorch: https://pytorch.org/get-started/locally/")
    print("   - CUDA: https://developer.nvidia.com/cuda-downloads")


if __name__ == "__main__":
    main() 