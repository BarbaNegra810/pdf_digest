#!/usr/bin/env python3
"""
Exemplo de uso da API PDF Digest com processamento Agno
para extra√ß√£o de trades e fees de notas de corretagem da B3.
"""

import requests
import json
from pathlib import Path

# Configura√ß√£o da API
API_BASE_URL = "http://localhost:5000/api"

def test_agno_endpoint():
    """
    Testa o endpoint espec√≠fico para extra√ß√£o de dados B3 com Agno.
    """
    print("=== Teste do Endpoint /extract-b3-trades (Agno) ===")
    
    # Exemplo de arquivo PDF de nota de corretagem
    # Substitua pelo caminho real do seu arquivo
    pdf_file_path = "exemplo_nota_corretagem_b3.pdf"
    
    if not Path(pdf_file_path).exists():
        print(f"‚ö†Ô∏è  Arquivo n√£o encontrado: {pdf_file_path}")
        print("   Criando arquivo de exemplo para demonstra√ß√£o...")
        return
    
    # Fazer upload do arquivo
    url = f"{API_BASE_URL}/extract-b3-trades"
    
    try:
        with open(pdf_file_path, 'rb') as f:
            files = {'file': f}
            response = requests.post(url, files=files)
        
        if response.status_code == 200:
            data = response.json()
            
            if data['success']:
                result = data['data']
                
                print("‚úÖ Extra√ß√£o bem-sucedida!")
                print(f"üìä Total de trades: {result['processing_info']['total_trades']}")
                print(f"üí∞ Total de fees: {result['processing_info']['total_fees']}")
                print(f"üîß Processador: {result['processing_info']['processor']}")
                
                # Exibe alguns trades de exemplo
                if result['trades']:
                    print("\n--- Exemplos de Trades ---")
                    for i, trade in enumerate(result['trades'][:3]):  # Primeiros 3
                        print(f"Trade {i+1}:")
                        print(f"  Ticker: {trade['ticker']}")
                        print(f"  Opera√ß√£o: {'Compra' if trade['operationType'] == 'C' else 'Venda'}")
                        print(f"  Quantidade: {trade['quantity']}")
                        print(f"  Pre√ßo: R$ {trade['price']:.2f}")
                        print(f"  Valor Total: R$ {trade['totalValue']:.2f}")
                        print()
                
                # Exibe fees
                if result['fees']:
                    print("--- Taxas por Nota ---")
                    for fee in result['fees']:
                        print(f"Nota {fee['orderNumber']}: R$ {fee['totalFees']:.2f}")
                
                # Salva resultado em arquivo
                with open('resultado_agno.json', 'w', encoding='utf-8') as f:
                    json.dump(result, f, ensure_ascii=False, indent=2)
                print("\nüíæ Resultado salvo em: resultado_agno.json")
                
            else:
                print("‚ùå Erro na extra√ß√£o:")
                print(f"   {data['error']}")
        else:
            print(f"‚ùå Erro HTTP {response.status_code}")
            print(f"   {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")

def test_adaptive_endpoint():
    """
    Testa o endpoint adaptativo /convert que escolhe automaticamente
    entre Docling e Agno baseado na configura√ß√£o.
    """
    print("\n=== Teste do Endpoint /convert (Adaptativo) ===")
    
    # Primeiro verifica o status da API
    status_url = f"{API_BASE_URL}/health"
    try:
        response = requests.get(status_url)
        if response.status_code == 200:
            health_data = response.json()
            print(f"üì° API Status: {health_data['data']['status']}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar status: {e}")
    
    # Teste usando arquivo j√° existente no servidor
    url = f"{API_BASE_URL}/convert"
    
    # Exemplo usando arquivo no servidor
    payload = {
        "path": "uploads",  # Diret√≥rio
        "filename": "exemplo_nota_corretagem_b3.pdf"  # Nome do arquivo
    }
    
    try:
        response = requests.post(url, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            
            if data['success']:
                result = data['data']
                processor = result.get('processor', 'unknown')
                format_type = result.get('format', 'unknown')
                
                print(f"‚úÖ Convers√£o bem-sucedida!")
                print(f"üîß Processador usado: {processor}")
                print(f"üìÑ Formato: {format_type}")
                
                if processor == 'agno':
                    print(f"üìä Trades extra√≠dos: {result['processing_info']['total_trades']}")
                    print(f"üí∞ Fees extra√≠dos: {result['processing_info']['total_fees']}")
                else:
                    print(f"üìÑ P√°ginas convertidas: {result['file_info']['pages_count']}")
                
            else:
                print("‚ùå Erro na convers√£o:")
                print(f"   {data['error']}")
        else:
            print(f"‚ùå Erro HTTP {response.status_code}")
            print(f"   {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")

def get_api_info():
    """
    Obt√©m informa√ß√µes sobre a API e endpoints dispon√≠veis.
    """
    print("\n=== Informa√ß√µes da API ===")
    
    url = f"{API_BASE_URL}/info"
    
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            
            if data['success']:
                info = data['data']
                print(f"üì± {info['name']} v{info['version']}")
                print(f"üìù {info['description']}")
                
                print("\n--- Endpoints Dispon√≠veis ---")
                for endpoint, description in info['endpoints'].items():
                    print(f"  {endpoint}: {description}")
                
                print(f"\n--- Limites ---")
                print(f"  Tamanho m√°ximo: {info['limits']['max_file_size_mb']} MB")
                print(f"  Extens√µes: {', '.join(info['limits']['allowed_extensions'])}")
                
            else:
                print("‚ùå Erro ao obter informa√ß√µes da API")
        else:
            print(f"‚ùå Erro HTTP {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")

def check_agno_setup():
    """
    Verifica se o Agno est√° configurado corretamente.
    """
    print("\n=== Verifica√ß√£o da Configura√ß√£o Agno ===")
    
    url = f"{API_BASE_URL}/health"
    
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            
            if data['success']:
                health_info = data['data']
                print("üìä Status da API:")
                for check, status in health_info['checks'].items():
                    emoji = "‚úÖ" if status else "‚ùå"
                    print(f"   {emoji} {check}: {status}")
                
                # Verifica configura√ß√£o espec√≠fica do Agno
                print("\nüîß Configura√ß√£o Agno:")
                print("   ‚ö†Ô∏è  Certifique-se de que:")
                print("   1. OPENAI_API_KEY est√° configurada no .env")
                print("   2. PDF_PROCESSOR=agno no .env")
                print("   3. Depend√™ncias do Agno est√£o instaladas")
            else:
                print("‚ùå Erro ao verificar status da API")
        else:
            print(f"‚ùå Erro HTTP {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")

def main():
    """
    Executa todos os testes.
    """
    print("üöÄ Testando API PDF Digest com Agno REAL")
    print("==========================================")
    
    # Verifica configura√ß√£o do Agno
    check_agno_setup()
    
    # Obt√©m informa√ß√µes da API
    get_api_info()
    
    # Testa endpoint espec√≠fico do Agno
    test_agno_endpoint()
    
    # Testa endpoint adaptativo
    test_adaptive_endpoint()
    
    print("\n‚ú® Testes conclu√≠dos!")
    print("\nüìö Para usar o Agno real:")
    print("   1. Configure OPENAI_API_KEY no arquivo .env")
    print("   2. Configure PDF_PROCESSOR=agno no arquivo .env")
    print("   3. Instale depend√™ncias: pip install agno openai")
    print("   4. Reinicie a aplica√ß√£o")
    print("   5. O Agno usar√° GPT-4 Omni para extrair dados estruturados")

if __name__ == "__main__":
    main()
